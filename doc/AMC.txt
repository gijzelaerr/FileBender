
What do we want
===============

* File upload encryption, before leaving the computer
* Secure transmission and storage
* File only readable by end user
* Chunking / resuming
* No 3rd party software or plugins












Implementation
==============

* Standard form file upload
* AES with 128, 192 or 256 key size
* with random salt


Upload:
* Read a file (File API, not in IE9)
* Slice a file (File.slice)
* Encode slice BASE64
* Encrypt slice (SJCL)
* Make a blob from encrypted slice (BlobBuilder, not in Safari5)
* Store blob into temporary local filesystem so we can name Blob (chrome 9+ only)
* Upload each encrypted slice
* Data concatenated server side

Download:
* Normal file download
* If HTTP server support Range, chunked download, else sliced
* Each chunk is decrypted
* Concatenated in temporary local filesystem (chrome only)
* If no temp local FS, BlobBuilder (mem usage 3x file size)
* File is offered to user

Threading:
* Make non blocking using Web Workers





Supported browsers
==================

* Google Chrome 13+ OR
* Mozilla Firefox 6+ OR
* Maybe Safari 6+ (not yet released)
* Maybe Internet Explorer 10+ (not yet released)

Not working:
* Safari 5
* Internet Explorer 9
* Opera (11.52/11.60)
* Firefox 8, somehow the webwokers stopped working.


Last point is example of the HTML5 virginity.






Conclusion
==========

* Cutting edge technology
* API's in development, not fully implemented or may change - Will need some love in the future!
* Will only work completely in Google Chrome
* Can work but less good with Firefox
* Small flash tool can help
* Debugging is hard, no webworker debug tools
* limited documentation



Future Work
===========

* Different crypto lib
* Google chrome extension for generic form encryption?
* Firefox extension to implement missing functionality a option, but a lot of work (out of scope)
